BAPD Tool Settings Management Programming Plan (Updated with config.py)

Objective:

To implement a robust settings management system for the BAPD Tool that leverages a 'config.py' file to handle paths, create the TOML file with default settings if not found, dynamically add settings to the file as features are implemented, save and load settings, handle button actions, and provide user feedback about unsaved changes.

Approach:

1. Create and Maintain 'config.py':
   - Place 'config.py' in the 'config' directory alongside the TOML file.
   - Define constants for all relevant paths (TOML_PATH, ZMAC_DEFAULT_DIR, MAME_DEFAULT_DIR, etc.).
   - Project vs. Production: Update the paths in 'config.py' to switch between development and production environments.

2. TOML File Creation and Initialization:
   - 'load_toml_settings' Function (in 'settings.py'):
      - Use 'config.TOML_PATH' to access the TOML file.
      - Create the file with default settings if it doesn't exist.
      - Add missing settings with default values if needed.

3. Enhance 'SettingsDialog' Class:
   - 'save_settings' Method:
      - Gather settings and write to 'config.TOML_PATH'.
   - 'load_settings' Method:
      - Populate the dialog with settings from 'config.TOML_PATH'.
   - Unsaved Changes Tracking:
      - Implement a mechanism to track changes.
   - Dynamic Settings Addition:
      - Create a method to add new settings to 'config.TOML_PATH' as needed.

4. Connect Button Actions:
   - OK Button: Saves all settings and closes the dialog.
   - Cancel Button: Warns about unsaved changes and closes if confirmed.
   - Apply Button: Saves settings for the active tab.

5. Error Handling:
   - Handle file operation errors and invalid TOML data.

6. User Feedback:
   - Warn about unsaved changes on cancel.
   - Provide options to discard changes or return to the dialog.

Implementation Details:

* Path Management:
   - Throughout your code, use the constants from 'config.py' to access file paths (e.g., 'with open(config.TOML_PATH, "r") as f:').
* Default Settings:
   - Define default settings in 'config.py' or a separate module.
   - Ensure 'load_toml_settings' creates the file with defaults if not found.
* Dynamic Settings:
   - Call the 'add_setting' method whenever you introduce a new setting to ensure it's added to the TOML file with its default value.
