
BAPD Tool Settings Management Programming Plan (Updated)

Objective:

To implement a robust settings management system for the BAPD Tool that leverages a 'config.py' file to handle paths, create the TOML file with default settings if not found, dynamically add settings to the file as features are implemented, save and load settings, handle button actions, and provide user feedback about unsaved changes.

Approach:

Create and Maintain config.py:

- Place 'config.py' in the root directory of the project.
- Define constants for all relevant paths ('TOML_FULL_PATH', 'DEFAULT_ZMAC_PATH', 'DEFAULT_MAME_PATH', etc.).
- The paths in 'config.py' directly reference the production environment using the user's home directory.

TOML File Creation and Initialization:

- 'load_settings_from_toml' Function (in 'settings.py'):
    - Use 'config.TOML_FULL_PATH' to access the TOML file.
    - Create the file with default settings if it doesn't exist.
    - Add missing settings with default values if needed.

Enhance SettingsDialog Class:

- 'save_settings_to_toml' Method:
    - Gather settings from UI elements and write to 'config.TOML_FULL_PATH'.
- 'load_settings_from_toml' Method:
    - Populate the dialog with settings from 'config.TOML_FULL_PATH'.
- Unsaved Changes Tracking:
    - (Not yet implemented) Implement a mechanism to track changes.
- Dynamic Settings Addition:
    - (Not yet implemented) Create a method to add new settings to 'config.TOML_FULL_PATH' as needed.

Connect Button Actions:

- OK Button: Saves all settings and closes the dialog.
- Cancel Button: Warns about unsaved changes and closes if confirmed.
- Apply Button: Saves settings for the active tab.

Error Handling:

- Handle file operation errors (e.g., 'FileNotFoundError') and invalid TOML data.

User Feedback:

- (Partially implemented) Warn about invalid Zmac path in 'settings.py'.
- (Not yet implemented) Warn about unsaved changes on cancel.
- (Not yet implemented) Provide options to discard changes or return to the dialog.

Implementation Details:

Path Management:

- Throughout your code, use the constants from 'config.py' to access file paths (e.g., 'with open(config.TOML_FULL_PATH, "r") as f:').

Default Settings:

- Define default settings in 'config.py'.
- Ensure 'load_settings_from_toml' creates the file with defaults if not found.

Dynamic Settings:

- (Not yet implemented) Call the 'add_setting' method whenever you introduce a new setting to ensure it's added to the TOML file with its default value.
