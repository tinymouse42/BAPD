Bally Astrocade Project Development (BAPD) Tool Specifications

Project Goal:
Streamline and enhance the development process for Bally Astrocade projects using a Python-based application with a graphical user interface (GUI).

Key Features:

*   Project Selection: Easily choose Astrocade projects for compilation and emulation.
*   Compilation (Zmac Integration): Compile Astrocade assembly code using Zmac.
*   Emulation (MAME Integration): Run compiled Astrocade programs in MAME.
*   Settings Management: Configure paths to Zmac, MAME, and other preferences.
*   Source Code Editing (Planned): Edit source code within the application.
*   Listing Viewing (Planned): Display assembly listings for easier debugging.

Technical Specifications:

*   Language: Python
*   GUI Framework: PySide6 (Qt)
*   Configuration Format: TOML (settings.toml)

 Project Directory Structure:

BAPD
├── Projects
│   ├── Astrocade_Program
│   │   └── Version_Archive
│   └── My_Project
│       └── Version_Archive
├── _Documentation
└── _Programs
├── Files
├── MAME
├── PSPad
├── ROMs
│   ├── astrocde
│   │   └── quadra
│   ├── astrocdl
│   └── astrocdw
└── Zmac

Production Directory Structure:

BAPD
├── Projects
│  ├── Astrocade_Program
│  │  └── Version_Archive
│  └── My_Project
│      └── Version_Archive
├── _Documentation
└── _Programs
├── Files
├── MAME
├── PSPad
├── ROMs
│  ├── astrocde
│  │  └── quadra
│  ├── astrocdl
│  └── astrocdw
└── Zmac

Settings File ('config/settings.toml'):

*   'zmac_path': Path to the Zmac executable (relative to the BAPD root).
*   'mame_path': Path to the MAME executable (relative to the BAPD root).
*   Additional settings can be added as needed (e.g., project directories, emulator options).

Code Structure:

*   'src/main.py': Main application logic.
*   'src/settings.py': Settings management logic ('SettingsManager' class).
*   'ui/BAPD_Main_GUI.py': Main window UI (generated by Qt Designer).
*   'ui/BAPD_Settings_GUI.py': Settings dialog UI (generated by Qt Designer).

Additional Notes:

*   The 'Projects/' directory is intended to store Astrocade project folders.
*   Error handling and user feedback mechanisms are essential for a smooth user experience.
*   Consider incorporating progress indicators during compilation and emulation.
*   Explore options for syntax highlighting in the source code editor and listing viewer.


TO DO LIST

Settings Menu
[ ] Introduce a "Settings" menu in your GUI. (In Progress)
[ ] Design a settings structure (TOML, consider Zmac paths, MAME flags, other preferences).
Action Items:
	{ } Path to Zmac executable (with a default)
	{ } Path to MAME executable (with a default)
	{ } Option to use .z80 or .asm for the source extension
	{ } Option to always start MAME in debug mode
	{ } Add custom Zmac command-line flags
	{ } Add custom mame command-line flags
[ ] Implement persistent settings storage using a settings.toml file within the C:\Users\USI\BAPD\_Programs\config directory.
[X]Install the toml library: pip install toml

2. Installation & Configuration Check on Startup
[ ] On startup, run a routine to validate:
[ ] File Structure: Existence of expected project directories.
[ ] Zmac Presence: Check for zmac.exe in its expected location.
[ ] MAME Presence: Check for mame64.exe.
[ ] Configuration Validity (Optional): Load settings and identify any invalid configurations.

3. Archive Button
[ ] Implement the "Archive" button to create a "versions" directory within the current project.
[ ] On button click, save a timestamped (or version-numbered) copy of the current .asm file into the "versions" directory.
[ ] Auto-archive the current source file on program exit.

4. Dynamic GUI Resizing
[ ] Output Window Expansion: Resize the output window as the main window resizes.
[ ] Component Rearrangement: Adapt the placement of other GUI elements as needed.
[ ] Optional Fullscreen: Explore making the window toggle between regular and fullscreen modes.

5. Basic Formatting in Output Window
[ ] Investigate using bold font and colors within the output window. Consider limitations if relying on QPlainTextEdit.
[ ] If necessary for richer formatting, explore the trade-offs of switching to QTextEdit.

6. Project Data Structure
[ ] Encapsulate project information (name, path, settings) within an object for better organization and scalability.

7. Ongoing Code Cleanup and Optimization
[IN PROGRESS] Code review

8. Splash Screen (Low Priority)
[ ] Create a splash and loading screen on program startup.